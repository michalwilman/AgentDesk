version: '3.8'

# AgentDesk Production Docker Compose Configuration
# This file is used to deploy all services together in production

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agentdesk-backend-prod
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    environment:
      # Node Configuration
      - NODE_ENV=production
      - PORT=3001
      
      # Supabase Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_MAX_FILE_SIZE=${SUPABASE_MAX_FILE_SIZE:-52428800}
      
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o-mini}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}
      
      # CORS Configuration
      - CORS_ORIGIN=${CORS_ORIGIN}
      
      # Security
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # Chunking Configuration
      - CHUNK_SIZE=${CHUNK_SIZE:-500}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-50}
      
      # Scraper Configuration
      - SCRAPER_TIMEOUT=${SCRAPER_TIMEOUT:-30000}
      - SCRAPER_MAX_DEPTH=${SCRAPER_MAX_DEPTH:-3}
      - SCRAPER_USER_AGENT=${SCRAPER_USER_AGENT:-AgentDesk-Bot/1.0}
      
      # Rate Limiting
      - RATE_LIMIT_TTL=${RATE_LIMIT_TTL:-60}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)}).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - agentdesk-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Dashboard Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # Build-time environment variables (baked into the build)
        - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_WIDGET_URL=${NEXT_PUBLIC_WIDGET_URL}
        - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-AgentDesk}
        - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
    container_name: agentdesk-frontend-prod
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)}).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - agentdesk-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Widget Service
  widget:
    build:
      context: ./widget
      dockerfile: Dockerfile
      args:
        # Build-time environment variables
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    container_name: agentdesk-widget-prod
    restart: unless-stopped
    ports:
      - "${WIDGET_PORT:-3002}:3002"
    environment:
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)}).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - agentdesk-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  agentdesk-prod:
    driver: bridge

# Note: This configuration assumes you're using external Supabase for database.
# If you need local PostgreSQL + pgvector, add the postgres service from docker-compose.yml

